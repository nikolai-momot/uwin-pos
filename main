package POS.java;

import java.text.DecimalFormat;
import java.util.*;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public abstract class Main extends JFrame implements ActionListener,ListSelectionListener{
	
	private JButton confirmOrder;
	private JButton clearSelection;
	private JButton logout;
	private JLabel discount;
	private JScrollPane listScroller;
	private ListSelectionModel selectionMode;
	private String[] discountOptions = { "Select", "None", "Worker", "Student" };
	private JComboBox discountList;
	private JTextField subTotal, total, tax;
	private JLabel label, label2, label3;
	private JTable table;
	private Object[][] theOrder;
	private double ttl, subtl, tx, disct;
	private int j, i;
	private JPanel Mpanel, Gpanel;
	//private Double[] prices = {5.00, 3.00, 2.00, 20.00, 5.99, 11.00, 12.99, 6.0};
	
	
	public Main(String title) {
		super(title);
		
		CreateView();
		
		setSize(670,560);
		setResizable(false);
		//panel = new JPanel();
		setLocationRelativeTo(null);

	}	

	
	
	private void CreateView(){
     Mpanel = new JPanel();
     /*this line makes the panel to be the container for each Gui component*/
     getContentPane().add(Mpanel);
     
     /*this is used to group each of Gui together into a panel*/
     Gpanel = new JPanel(new GridBagLayout());
     //adds the gpanel to the main container called mpanel
     Mpanel.add(Gpanel);
     //sets the constraint for the layout 
     GridBagConstraints c = new GridBagConstraints();
     
		theOrder = new Object[20][20];
		ttl = 0.0;
		subtl = 0.0;
		tx= 0.0;
		disct = 0.0;
		
		/*a layout that allows flexible alignment of components*/
		c.gridx = 0;
	    c.gridy = 0;
	    c.anchor = GridBagConstraints.LINE_START;
	    logout = new JButton("Logout");
	     
	  
	    	    logout.addActionListener(new ActionListener(){
			
			public void actionPerformed(ActionEvent e){
				Login frame = new Login("Login");
				frame.setVisible(true);
				Close();	
			}
		});
	   Gpanel.add(logout, c);
        
        
		String[] columnNames = {"Food item", "Price"};
		
		Object[][] data = {
			    {"Chicken Sandwich", new Double(5.00)},
			    {"French Fries", new Double(3.00)},
			    {"Soft Drinks", new Double(2.00)},
			    {"Water", new Double(20.00)},
			    {"Ice Cream", new Double(5.99)},
			    {"Pizza slice", new Double(11.00)},
			    {"Tossed Salad", new Double(12.90)},
			    {"House Salad", new Double(6.07)},
			    {"Garlic cheese bread", new Double(25.50)},
			    {"Special Sandwich", new Double(14.00)},
			    {"Cheddar Biscuit", new Double(15.00)},
			    {"Veggie Sandwich", new Double(30.00)},
			    {"Egg Omelet", new Double(21.00)},
			    {"Home Fries", new Double(24.99)},
			    {"Whole Grain toast", new Double(10.90)}
		     };
		table = new JTable(data, columnNames);
		c.gridx = 0;
		c.gridy = 1;
		table.setPreferredSize(new Dimension(450, 260));
		Gpanel.add(table, c);
		//add(panel);
		listScroller = new JScrollPane(table);
		c.gridx = 0;
		c.gridy = 1;
		listScroller.setPreferredSize(new Dimension(450, 260));
		Gpanel.add(listScroller, c);
		
        
		
		
		label = new JLabel("SUBTOTAL: ");
		c.insets = new Insets(40, 0, 0, 0); //specifies the bottom distance
		c.gridx = 0;
		c.gridy = 2;		
		Gpanel.add(label, c);
		subTotal = new JTextField(33);
		c.insets = new Insets(40, 75, 0, 0);
		c.gridx = 0;
		c.gridy = 2;		
		Gpanel.add(subTotal, c);
		
		label3 = new JLabel("TAX: ");
		c.insets = new Insets(0, 0, 24, 0); //specifies the bottom distance
		c.gridx = 0;
		c.gridy = 3;		
		Gpanel.add(label3, c);
		 tax = new JTextField(33);
		c.insets = new Insets(0, 75, 24, 0);
		c.gridx = 0;
		c.gridy = 3;		
		Gpanel.add(tax, c);
		

		
		label2 = new JLabel("TOTAL: ");
		c.insets = new Insets(46, 0, 0, 0); //specifies the bottom distance
		c.gridx = 0;
		c.gridy = 3;		
		Gpanel.add(label2, c);
		total = new JTextField(33);
		c.insets = new Insets(46, 75, 0, 0);
		c.gridx = 0;
		c.gridy = 3;
		Gpanel.add(total, c);
		
		 ListSelectionModel cellSelectionModel = table.getSelectionModel();
		 cellSelectionModel.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		 
		
		cellSelectionModel.addListSelectionListener(new ListSelectionListener(){
	        public void valueChanged(ListSelectionEvent event) {
	         
	          int [] srows = table.getSelectedRows();
	          int [] scols = table.getSelectedColumns();
	       
	          /*to remove redundant calculation of the prices, because a click triggers this
	           *event multiple times*/
	            subtl = 0.0;
	          
	        for(i = 0; i<srows.length; i++ ){
	        	for(j = 0; j<scols.length; j++){
	        	 
	        		subtl += (Double)(table.getValueAt(srows[i], scols[j]));
	        	 
	        	 subTotal.setText(" " + subtl); 
	        	}
	        	
	        }  
	        	
	       	}
	    });
		confirmOrder = new JButton("Order!");
		
		c.insets = new Insets(0, 45, 130, 0); // specifies the bottom distance 
		c.gridx = 1;
		c.gridy = 1;
		
		confirmOrder.addActionListener( new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				//PayFrame pay = new PayFrame("Pay Frame", hold);
			//	pay.setVisible(true);
			}
		});
		Gpanel.add(confirmOrder, c);
		clearSelection = new JButton("Clear List");
		c.insets = new Insets(0, 37, 20, 0); //specifies the bottom distance
		c.gridx = 1;
		c.gridy = 1;
		c.ipadx = 1/2;
		clearSelection.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
			ttl = 0.0;
			subTotal.setText(" ");
			total.setText(" ");
			tax.setText(" ");
			table.removeRowSelectionInterval(0, table.getRowCount()-1);
			}
		});
		
		Gpanel.add(clearSelection, c);
		
		/*to calculate the tax on the customer order*/
		
		tax.addActionListener(new ActionListener(){
			
			public void actionPerformed(ActionEvent e){
			/*tax formula
			 * tax = tax/100;
			 * x = item cost * tax
			 * x = x + item cost
			 */	
				double m =0.0;
			 //retrieves the tax amount on the order	
			 tx = Double.parseDouble(e.getActionCommand());
			  //to get the actual tax value
			 ttl = ((disct * tx)/100);
			  m = ttl;
			 ttl = (m + disct);
			  total.setText(" " + new DecimalFormat("##.##").format(ttl));
			}
			
			
			
		});
		
		
		discount = new JLabel("DISCOUNT");
		c.insets = new Insets(60, 50, 0, 0);
		c.gridx = 1;
		c.gridy = 1;
		Gpanel.add(discount, c);
	 
		
		
		discountList = new JComboBox();
		c.insets = new Insets(109, 45, 0, 0);
		c.gridx = 1;
		c.gridy = 1;
		
		/*use to add items to the combo box*/
		for (int i = 0; i <discountOptions.length; i++){
			discountList.addItem(discountOptions[i]);
		}
		 discountList.addActionListener(new ActionListener(){
			 public void actionPerformed(ActionEvent e){
				 double k;
				 if(discountList.getSelectedItem() == "Student"){
						disct = ((subtl * 5)/100); //gets the discount
						k = disct;
					   disct = (subtl - k);
					  //  total.setText(" " + new DecimalFormat("##.##").format(ttl));
					    
				    }
					else if(discountList.getSelectedItem() == "Worker"){
					disct = ((subtl * 10)/100);
					k = disct;
					disct = (subtl - k);	
						//total.setText(" " + new DecimalFormat("##.##").format(ttl));
					}
					else if(discountList.getSelectedItem() == "None"){
					disct = ((subtl * 25)/100);
					k = disct;
					   disct = (subtl - k);
					//   total.setText(" " + new DecimalFormat("##.##").format(disct));
						 	
					}
			 }
			 
		 });
		
	     Gpanel.add(discountList, c);
	}	

	public void Close(){
		 super.dispose();		
		}
	
	}


